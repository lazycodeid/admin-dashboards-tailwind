{"version":3,"file":"app.js","mappings":";UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;;;;;;ACPD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;AC9DD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,M;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB,sCAAsC,kBAAkB;AACvF,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,qBAAM,gBAAgB,qBAAM,IAAI,qBAAM,sBAAsB,qBAAM;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,SAAS;AAC1B;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,SAAS;AAC1B;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,eAAe,QAAQ,WAAW;AAClC,eAAe,SAAS;AACxB;AACA,eAAe,QAAQ;AACvB;AACA,eAAe,SAAS;AACxB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,mDAAmD,iBAAiB;AACpeAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,eAAe,QAAQ,WAAW;AAClC,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,mBAAmB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,2BAA2B;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,sCAAsC;AACtiBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oDAAoD;AACjF,iCAAiC;AACjC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oDAAoD;AACjF,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,eAAe;AACtqBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,gCAAgC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I;;;;;;;;AClmDD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,0BAA0B;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,6BAA6B;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wDAAwD,OAAO;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,c;;;;;;;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;ACjFD;AACA;AACA,+DAA+D,OAAO;AACtE;AACA,yDAAyD,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,C;;;;;;;;;;;;;;;;AExED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,IAAI;AAC9D;AACA,C;;;;;;;;AC/FA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D,2BAA2B,wCAAwC;AACnE,0BAA0B,uCAAuC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,C;;;;;;;;ACjCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,qCAAqC,yBAAyB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA","sources":["webpack://lazy-admin-template/webpack/bootstrap","webpack://lazy-admin-template/webpack/runtime/global","webpack://lazy-admin-template/./src/js/header.js","webpack://lazy-admin-template/./src/js/main.js","webpack://lazy-admin-template/./src/js/scrollbar.js","webpack://lazy-admin-template/./src/js/settings.js","webpack://lazy-admin-template/./src/js/sidebar.js","webpack://lazy-admin-template/./src/js/components/collapse.js","webpack://lazy-admin-template/./src/js/components/dropdown.js","webpack://lazy-admin-template/./src/js/components/offcanvas.js","webpack://lazy-admin-template/./src/js/components/ripple.js","webpack://lazy-admin-template/./src/js/components/tooltip.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","const header = document.querySelector(\"._lazy-header-wrapper\")\r\n\r\nif(header){\r\n    window.addEventListener(\"scroll\", () => {\r\n        header.classList.toggle(\"scroll-top\", window.scrollY <= 0)\r\n        header.classList.toggle(\"scroll-down\", window.scrollY > 0)\r\n    })\r\n}\r\n\r\ndocument.querySelectorAll(\"[lazy-dropdown-avatar]\").forEach((element) => {\r\n    const button = element.querySelector(\"[lazy-dropdown-toggle]\");\r\n    const content = element.querySelector(\"[lazy-dropdown-content]\");\r\n    if (!button || !content) return console.error(\"LazyDropdown: 'lazy-dropdown-toggle' or 'lazy-dropdown-content' not found.\");\r\n\r\n    let isOpen = button.classList.contains(\"is-active\");\r\n\r\n    content.style.opacity = isOpen ? 1 : 0;\r\n    content.style.transform = isOpen ? \"scale(1)\" : \"scale(0.95)\";\r\n    content.style.transformOrigin = 'top';\r\n\r\n    button.addEventListener(\"click\", toggle);\r\n\r\n    window.addEventListener(\"click\", (event) => {\r\n        if (!isOpen) return\r\n        if (event.target.closest(\"[lazy-dropdown-toggle]\") == button) return\r\n        if (event.target.closest(\"[lazy-dropdown-content]\") == content) return\r\n        toggle()  \r\n    })\r\n\r\n    function toggle() {\r\n        if (isOpen) {\r\n            document.removeEventListener(\"keyup\", escapeKey);\r\n            window.lazyDisableScrollbar(false)\r\n\r\n            content.style.opacity = 0;\r\n            content.style.transform = \"scale(0.95)\";\r\n            button.classList.remove(\"is-active\");\r\n            setTimeout(() => {\r\n                content.classList.remove(\"is-active\");\r\n                isOpen = !isOpen;\r\n            }, 300)\r\n        } else {\r\n            document.addEventListener(\"keyup\", escapeKey);\r\n            window.lazyDisableScrollbar(true)\r\n\r\n            content.classList.add(\"is-active\");\r\n            button.classList.add(\"is-active\");\r\n            setTimeout(() => {\r\n                content.style.opacity = 1;\r\n                content.style.transform = \"scale(1)\";\r\n                isOpen = !isOpen;\r\n            })\r\n        }\r\n    }\r\n\r\n    function escapeKey(e) {\r\n        if (!isOpen) return\r\n        if (e.key != \"Escape\") return\r\n        e.preventDefault()\r\n        toggle()\r\n        console.log(isOpen);\r\n    }\r\n});\r\n","document.querySelectorAll(\"[lazy-icon]\").forEach((element)=>{\r\n    const i = document.createElement(\"i\")\r\n    i.className = element.getAttribute(\"lazy-icon\")\r\n    element.insertAdjacentElement(\"beforeend\",i)\r\n})\r\n\r\nwindow.lazyDisableScrollbar = (status = true) => {\r\n    if(status){\r\n        if(document.body.scrollHeight > window.innerHeight){\r\n            document.body.classList.add(\"_lazy-disable-scroll\", \"with-pr\");\r\n        } else {\r\n            document.body.classList.add(\"_lazy-disable-scroll\");\r\n        }\r\n    }else{\r\n        document.body.classList.remove(\"_lazy-disable-scroll\", \"with-pr\");\r\n    }\r\n}\r\n \r\n\r\n// for demo auto active sidebar\r\ndocument.querySelectorAll(\"[lazy-simplebar-init] nav ._lazy-nav-item\").forEach((element)=>{\r\n    let href = location.href\r\n    href = href.replace(\"#\", \"\")\r\n    \r\n    if(element.nodeName == \"A\"){\r\n        if (element.href != href) return\r\n        element.classList.add(\"is-active\")\r\n    } else {\r\n        const subitem = element.closest(\"[lazy-collapse-init]\")\r\n        if(!subitem?.querySelector(\"._lazy-navcollapse-content\")) return\r\n        subitem.querySelectorAll(\"._lazy-navcollapse-content ._lazy-nav-subitem\").forEach(element => {\r\n            if(element.href != href) return\r\n            element.classList.add(\"is-active\")\r\n        })\r\n    }\r\n})\r\n\r\n// console.log(`\r\n//   く__,.ヘヽ.        /  ,ー､ 〉\r\n//            ＼ ', !-─‐-i  /  /´\r\n//            ／｀ｰ'       L/／｀ヽ､\r\n//          /   ／,   /|   ,   ,       ',\r\n//        ｲ   / /-‐/  ｉ  L_ ﾊ ヽ!   i\r\n//         ﾚ ﾍ 7ｲ｀ﾄ   ﾚ'ｧ-ﾄ､!ハ|   |\r\n//           !,/7 '0'     ´0iソ|    |\r\n//           |.从\"    _     ,,,, / |./    |\r\n//           ﾚ'| i＞.､,,__  _,.イ /   .i   |\r\n//             ﾚ'| | / k_７_/ﾚ'ヽ,  ﾊ.  |\r\n//               | |/i 〈|/   i  ,.ﾍ |  i  |\r\n//              .|/ /  ｉ：    ﾍ!    ＼  |\r\n//               kヽ>､ﾊ    _,.ﾍ､    /､!\r\n//               !'〈//｀Ｔ´', ＼ ｀'7'ｰr'\r\n//               ﾚ'ヽL__|___i,___,ンﾚ|ノ\r\n//                   ﾄ-,/  |___./\r\n//                   'ｰ'    !_,.:\r\n// `);","/**\r\n * simplebar - v6.2.5\r\n * Scrollbars, simpler.\r\n * https://grsmto.github.io/simplebar/\r\n *\r\n * Made by Adrien Denat from a fork by Jonathan Nicol\r\n * Under MIT License\r\n */\r\n\r\nvar SimpleBar = (function () {\r\n    'use strict';\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var canUseDOM = !!(\r\n      typeof window !== 'undefined' &&\r\n      window.document &&\r\n      window.document.createElement\r\n    );\r\n\r\n    var canUseDom = canUseDOM;\r\n\r\n    /** Detect free variable `global` from Node.js. */\r\n    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n    var freeGlobal$1 = freeGlobal;\r\n\r\n    /** Detect free variable `self`. */\r\n    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n    /** Used as a reference to the global object. */\r\n    var root = freeGlobal$1 || freeSelf || Function('return this')();\r\n\r\n    var root$1 = root;\r\n\r\n    /** Built-in value references. */\r\n    var Symbol = root$1.Symbol;\r\n\r\n    var Symbol$1 = Symbol;\r\n\r\n    /** Used for built-in method references. */\r\n    var objectProto$1 = Object.prototype;\r\n\r\n    /** Used to check objects for own properties. */\r\n    var hasOwnProperty = objectProto$1.hasOwnProperty;\r\n\r\n    /**\r\n     * Used to resolve the\r\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n     * of values.\r\n     */\r\n    var nativeObjectToString$1 = objectProto$1.toString;\r\n\r\n    /** Built-in value references. */\r\n    var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\r\n\r\n    /**\r\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to query.\r\n     * @returns {string} Returns the raw `toStringTag`.\r\n     */\r\n    function getRawTag(value) {\r\n      var isOwn = hasOwnProperty.call(value, symToStringTag$1),\r\n          tag = value[symToStringTag$1];\r\n\r\n      try {\r\n        value[symToStringTag$1] = undefined;\r\n        var unmasked = true;\r\n      } catch (e) {}\r\n\r\n      var result = nativeObjectToString$1.call(value);\r\n      if (unmasked) {\r\n        if (isOwn) {\r\n          value[symToStringTag$1] = tag;\r\n        } else {\r\n          delete value[symToStringTag$1];\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /** Used for built-in method references. */\r\n    var objectProto = Object.prototype;\r\n\r\n    /**\r\n     * Used to resolve the\r\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n     * of values.\r\n     */\r\n    var nativeObjectToString = objectProto.toString;\r\n\r\n    /**\r\n     * Converts `value` to a string using `Object.prototype.toString`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to convert.\r\n     * @returns {string} Returns the converted string.\r\n     */\r\n    function objectToString(value) {\r\n      return nativeObjectToString.call(value);\r\n    }\r\n\r\n    /** `Object#toString` result references. */\r\n    var nullTag = '[object Null]',\r\n        undefinedTag = '[object Undefined]';\r\n\r\n    /** Built-in value references. */\r\n    var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\r\n\r\n    /**\r\n     * The base implementation of `getTag` without fallbacks for buggy environments.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to query.\r\n     * @returns {string} Returns the `toStringTag`.\r\n     */\r\n    function baseGetTag(value) {\r\n      if (value == null) {\r\n        return value === undefined ? undefinedTag : nullTag;\r\n      }\r\n      return (symToStringTag && symToStringTag in Object(value))\r\n        ? getRawTag(value)\r\n        : objectToString(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n     * and has a `typeof` result of \"object\".\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n     * @example\r\n     *\r\n     * _.isObjectLike({});\r\n     * // => true\r\n     *\r\n     * _.isObjectLike([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isObjectLike(_.noop);\r\n     * // => false\r\n     *\r\n     * _.isObjectLike(null);\r\n     * // => false\r\n     */\r\n    function isObjectLike(value) {\r\n      return value != null && typeof value == 'object';\r\n    }\r\n\r\n    /** `Object#toString` result references. */\r\n    var symbolTag = '[object Symbol]';\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Symbol` primitive or object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSymbol(Symbol.iterator);\r\n     * // => true\r\n     *\r\n     * _.isSymbol('abc');\r\n     * // => false\r\n     */\r\n    function isSymbol(value) {\r\n      return typeof value == 'symbol' ||\r\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\r\n    }\r\n\r\n    /** Used to match a single whitespace character. */\r\n    var reWhitespace = /\\s/;\r\n\r\n    /**\r\n     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\r\n     * character of `string`.\r\n     *\r\n     * @private\r\n     * @param {string} string The string to inspect.\r\n     * @returns {number} Returns the index of the last non-whitespace character.\r\n     */\r\n    function trimmedEndIndex(string) {\r\n      var index = string.length;\r\n\r\n      while (index-- && reWhitespace.test(string.charAt(index))) {}\r\n      return index;\r\n    }\r\n\r\n    /** Used to match leading whitespace. */\r\n    var reTrimStart = /^\\s+/;\r\n\r\n    /**\r\n     * The base implementation of `_.trim`.\r\n     *\r\n     * @private\r\n     * @param {string} string The string to trim.\r\n     * @returns {string} Returns the trimmed string.\r\n     */\r\n    function baseTrim(string) {\r\n      return string\r\n        ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\r\n        : string;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is the\r\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n     * @example\r\n     *\r\n     * _.isObject({});\r\n     * // => true\r\n     *\r\n     * _.isObject([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isObject(_.noop);\r\n     * // => true\r\n     *\r\n     * _.isObject(null);\r\n     * // => false\r\n     */\r\n    function isObject(value) {\r\n      var type = typeof value;\r\n      return value != null && (type == 'object' || type == 'function');\r\n    }\r\n\r\n    /** Used as references for various `Number` constants. */\r\n    var NAN = 0 / 0;\r\n\r\n    /** Used to detect bad signed hexadecimal string values. */\r\n    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n    /** Used to detect binary string values. */\r\n    var reIsBinary = /^0b[01]+$/i;\r\n\r\n    /** Used to detect octal string values. */\r\n    var reIsOctal = /^0o[0-7]+$/i;\r\n\r\n    /** Built-in method references without a dependency on `root`. */\r\n    var freeParseInt = parseInt;\r\n\r\n    /**\r\n     * Converts `value` to a number.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to process.\r\n     * @returns {number} Returns the number.\r\n     * @example\r\n     *\r\n     * _.toNumber(3.2);\r\n     * // => 3.2\r\n     *\r\n     * _.toNumber(Number.MIN_VALUE);\r\n     * // => 5e-324\r\n     *\r\n     * _.toNumber(Infinity);\r\n     * // => Infinity\r\n     *\r\n     * _.toNumber('3.2');\r\n     * // => 3.2\r\n     */\r\n    function toNumber(value) {\r\n      if (typeof value == 'number') {\r\n        return value;\r\n      }\r\n      if (isSymbol(value)) {\r\n        return NAN;\r\n      }\r\n      if (isObject(value)) {\r\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\r\n        value = isObject(other) ? (other + '') : other;\r\n      }\r\n      if (typeof value != 'string') {\r\n        return value === 0 ? value : +value;\r\n      }\r\n      value = baseTrim(value);\r\n      var isBinary = reIsBinary.test(value);\r\n      return (isBinary || reIsOctal.test(value))\r\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n        : (reIsBadHex.test(value) ? NAN : +value);\r\n    }\r\n\r\n    /**\r\n     * Gets the timestamp of the number of milliseconds that have elapsed since\r\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.4.0\r\n     * @category Date\r\n     * @returns {number} Returns the timestamp.\r\n     * @example\r\n     *\r\n     * _.defer(function(stamp) {\r\n     *   console.log(_.now() - stamp);\r\n     * }, _.now());\r\n     * // => Logs the number of milliseconds it took for the deferred invocation.\r\n     */\r\n    var now = function() {\r\n      return root$1.Date.now();\r\n    };\r\n\r\n    var now$1 = now;\r\n\r\n    /** Error message constants. */\r\n    var FUNC_ERROR_TEXT$1 = 'Expected a function';\r\n\r\n    /* Built-in method references for those with the same name as other `lodash` methods. */\r\n    var nativeMax = Math.max,\r\n        nativeMin = Math.min;\r\n\r\n    /**\r\n     * Creates a debounced function that delays invoking `func` until after `wait`\r\n     * milliseconds have elapsed since the last time the debounced function was\r\n     * invoked. The debounced function comes with a `cancel` method to cancel\r\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\r\n     * Provide `options` to indicate whether `func` should be invoked on the\r\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\r\n     * with the last arguments provided to the debounced function. Subsequent\r\n     * calls to the debounced function return the result of the last `func`\r\n     * invocation.\r\n     *\r\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\r\n     * invoked on the trailing edge of the timeout only if the debounced function\r\n     * is invoked more than once during the `wait` timeout.\r\n     *\r\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\r\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\r\n     *\r\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\r\n     * for details over the differences between `_.debounce` and `_.throttle`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to debounce.\r\n     * @param {number} [wait=0] The number of milliseconds to delay.\r\n     * @param {Object} [options={}] The options object.\r\n     * @param {boolean} [options.leading=false]\r\n     *  Specify invoking on the leading edge of the timeout.\r\n     * @param {number} [options.maxWait]\r\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\r\n     * @param {boolean} [options.trailing=true]\r\n     *  Specify invoking on the trailing edge of the timeout.\r\n     * @returns {Function} Returns the new debounced function.\r\n     * @example\r\n     *\r\n     * // Avoid costly calculations while the window size is in flux.\r\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\r\n     *\r\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\r\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\r\n     *   'leading': true,\r\n     *   'trailing': false\r\n     * }));\r\n     *\r\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\r\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\r\n     * var source = new EventSource('/stream');\r\n     * jQuery(source).on('message', debounced);\r\n     *\r\n     * // Cancel the trailing debounced invocation.\r\n     * jQuery(window).on('popstate', debounced.cancel);\r\n     */\r\n    function debounce(func, wait, options) {\r\n      var lastArgs,\r\n          lastThis,\r\n          maxWait,\r\n          result,\r\n          timerId,\r\n          lastCallTime,\r\n          lastInvokeTime = 0,\r\n          leading = false,\r\n          maxing = false,\r\n          trailing = true;\r\n\r\n      if (typeof func != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT$1);\r\n      }\r\n      wait = toNumber(wait) || 0;\r\n      if (isObject(options)) {\r\n        leading = !!options.leading;\r\n        maxing = 'maxWait' in options;\r\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\r\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\r\n      }\r\n\r\n      function invokeFunc(time) {\r\n        var args = lastArgs,\r\n            thisArg = lastThis;\r\n\r\n        lastArgs = lastThis = undefined;\r\n        lastInvokeTime = time;\r\n        result = func.apply(thisArg, args);\r\n        return result;\r\n      }\r\n\r\n      function leadingEdge(time) {\r\n        // Reset any `maxWait` timer.\r\n        lastInvokeTime = time;\r\n        // Start the timer for the trailing edge.\r\n        timerId = setTimeout(timerExpired, wait);\r\n        // Invoke the leading edge.\r\n        return leading ? invokeFunc(time) : result;\r\n      }\r\n\r\n      function remainingWait(time) {\r\n        var timeSinceLastCall = time - lastCallTime,\r\n            timeSinceLastInvoke = time - lastInvokeTime,\r\n            timeWaiting = wait - timeSinceLastCall;\r\n\r\n        return maxing\r\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\r\n          : timeWaiting;\r\n      }\r\n\r\n      function shouldInvoke(time) {\r\n        var timeSinceLastCall = time - lastCallTime,\r\n            timeSinceLastInvoke = time - lastInvokeTime;\r\n\r\n        // Either this is the first call, activity has stopped and we're at the\r\n        // trailing edge, the system time has gone backwards and we're treating\r\n        // it as the trailing edge, or we've hit the `maxWait` limit.\r\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\r\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\r\n      }\r\n\r\n      function timerExpired() {\r\n        var time = now$1();\r\n        if (shouldInvoke(time)) {\r\n          return trailingEdge(time);\r\n        }\r\n        // Restart the timer.\r\n        timerId = setTimeout(timerExpired, remainingWait(time));\r\n      }\r\n\r\n      function trailingEdge(time) {\r\n        timerId = undefined;\r\n\r\n        // Only invoke if we have `lastArgs` which means `func` has been\r\n        // debounced at least once.\r\n        if (trailing && lastArgs) {\r\n          return invokeFunc(time);\r\n        }\r\n        lastArgs = lastThis = undefined;\r\n        return result;\r\n      }\r\n\r\n      function cancel() {\r\n        if (timerId !== undefined) {\r\n          clearTimeout(timerId);\r\n        }\r\n        lastInvokeTime = 0;\r\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\r\n      }\r\n\r\n      function flush() {\r\n        return timerId === undefined ? result : trailingEdge(now$1());\r\n      }\r\n\r\n      function debounced() {\r\n        var time = now$1(),\r\n            isInvoking = shouldInvoke(time);\r\n\r\n        lastArgs = arguments;\r\n        lastThis = this;\r\n        lastCallTime = time;\r\n\r\n        if (isInvoking) {\r\n          if (timerId === undefined) {\r\n            return leadingEdge(lastCallTime);\r\n          }\r\n          if (maxing) {\r\n            // Handle invocations in a tight loop.\r\n            clearTimeout(timerId);\r\n            timerId = setTimeout(timerExpired, wait);\r\n            return invokeFunc(lastCallTime);\r\n          }\r\n        }\r\n        if (timerId === undefined) {\r\n          timerId = setTimeout(timerExpired, wait);\r\n        }\r\n        return result;\r\n      }\r\n      debounced.cancel = cancel;\r\n      debounced.flush = flush;\r\n      return debounced;\r\n    }\r\n\r\n    /** Error message constants. */\r\n    var FUNC_ERROR_TEXT = 'Expected a function';\r\n\r\n    /**\r\n     * Creates a throttled function that only invokes `func` at most once per\r\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\r\n     * method to cancel delayed `func` invocations and a `flush` method to\r\n     * immediately invoke them. Provide `options` to indicate whether `func`\r\n     * should be invoked on the leading and/or trailing edge of the `wait`\r\n     * timeout. The `func` is invoked with the last arguments provided to the\r\n     * throttled function. Subsequent calls to the throttled function return the\r\n     * result of the last `func` invocation.\r\n     *\r\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\r\n     * invoked on the trailing edge of the timeout only if the throttled function\r\n     * is invoked more than once during the `wait` timeout.\r\n     *\r\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\r\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\r\n     *\r\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\r\n     * for details over the differences between `_.throttle` and `_.debounce`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to throttle.\r\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\r\n     * @param {Object} [options={}] The options object.\r\n     * @param {boolean} [options.leading=true]\r\n     *  Specify invoking on the leading edge of the timeout.\r\n     * @param {boolean} [options.trailing=true]\r\n     *  Specify invoking on the trailing edge of the timeout.\r\n     * @returns {Function} Returns the new throttled function.\r\n     * @example\r\n     *\r\n     * // Avoid excessively updating the position while scrolling.\r\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\r\n     *\r\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\r\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\r\n     * jQuery(element).on('click', throttled);\r\n     *\r\n     * // Cancel the trailing throttled invocation.\r\n     * jQuery(window).on('popstate', throttled.cancel);\r\n     */\r\n    function throttle(func, wait, options) {\r\n      var leading = true,\r\n          trailing = true;\r\n\r\n      if (typeof func != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      if (isObject(options)) {\r\n        leading = 'leading' in options ? !!options.leading : leading;\r\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\r\n      }\r\n      return debounce(func, wait, {\r\n        'leading': leading,\r\n        'maxWait': wait,\r\n        'trailing': trailing\r\n      });\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    var cachedScrollbarWidth = null;\r\n    var cachedDevicePixelRatio = null;\r\n    if (canUseDom) {\r\n        window.addEventListener('resize', function () {\r\n            if (cachedDevicePixelRatio !== window.devicePixelRatio) {\r\n                cachedDevicePixelRatio = window.devicePixelRatio;\r\n                cachedScrollbarWidth = null;\r\n            }\r\n        });\r\n    }\r\n    function scrollbarWidth() {\r\n        if (cachedScrollbarWidth === null) {\r\n            if (typeof document === 'undefined') {\r\n                cachedScrollbarWidth = 0;\r\n                return cachedScrollbarWidth;\r\n            }\r\n            var body = document.body;\r\n            var box = document.createElement('div');\r\n            box.classList.add('simplebar-hide-scrollbar');\r\n            body.appendChild(box);\r\n            var width = box.getBoundingClientRect().right;\r\n            body.removeChild(box);\r\n            cachedScrollbarWidth = width;\r\n        }\r\n        return cachedScrollbarWidth;\r\n    }\r\n\r\n    function getElementWindow$1(element) {\r\n        if (!element ||\r\n            !element.ownerDocument ||\r\n            !element.ownerDocument.defaultView) {\r\n            return window;\r\n        }\r\n        return element.ownerDocument.defaultView;\r\n    }\r\n    function getElementDocument$1(element) {\r\n        if (!element || !element.ownerDocument) {\r\n            return document;\r\n        }\r\n        return element.ownerDocument;\r\n    }\r\n    // Helper function to retrieve options from element attributes\r\n    var getOptions$1 = function (obj) {\r\n        var initialObj = {};\r\n        var options = Array.prototype.reduce.call(obj, function (acc, attribute) {\r\n            var option = attribute.name.match(/data-simplebar-(.+)/);\r\n            if (option) {\r\n                var key = option[1].replace(/\\W+(.)/g, function (_, chr) { return chr.toUpperCase(); });\r\n                switch (attribute.value) {\r\n                    case 'true':\r\n                        acc[key] = true;\r\n                        break;\r\n                    case 'false':\r\n                        acc[key] = false;\r\n                        break;\r\n                    case undefined:\r\n                        acc[key] = true;\r\n                        break;\r\n                    default:\r\n                        acc[key] = attribute.value;\r\n                }\r\n            }\r\n            return acc;\r\n        }, initialObj);\r\n        return options;\r\n    };\r\n    function addClasses$1(el, classes) {\r\n        var _a;\r\n        if (!el)\r\n            return;\r\n        (_a = el.classList).add.apply(_a, classes.split(' '));\r\n    }\r\n    function removeClasses$1(el, classes) {\r\n        if (!el)\r\n            return;\r\n        classes.split(' ').forEach(function (className) {\r\n            el.classList.remove(className);\r\n        });\r\n    }\r\n    function classNamesToQuery$1(classNames) {\r\n        return \".\".concat(classNames.split(' ').join('.'));\r\n    }\r\n\r\n    var helpers = /*#__PURE__*/Object.freeze({\r\n        __proto__: null,\r\n        getElementWindow: getElementWindow$1,\r\n        getElementDocument: getElementDocument$1,\r\n        getOptions: getOptions$1,\r\n        addClasses: addClasses$1,\r\n        removeClasses: removeClasses$1,\r\n        classNamesToQuery: classNamesToQuery$1\r\n    });\r\n\r\n    var getElementWindow = getElementWindow$1, getElementDocument = getElementDocument$1, getOptions$2 = getOptions$1, addClasses$2 = addClasses$1, removeClasses = removeClasses$1, classNamesToQuery = classNamesToQuery$1;\r\n    var SimpleBarCore = /** @class */ (function () {\r\n        function SimpleBarCore(element, options) {\r\n            if (options === void 0) { options = {}; }\r\n            var _this = this;\r\n            this.removePreventClickId = null;\r\n            this.minScrollbarWidth = 20;\r\n            this.stopScrollDelay = 175;\r\n            this.isScrolling = false;\r\n            this.isMouseEntering = false;\r\n            this.scrollXTicking = false;\r\n            this.scrollYTicking = false;\r\n            this.wrapperEl = null;\r\n            this.contentWrapperEl = null;\r\n            this.contentEl = null;\r\n            this.offsetEl = null;\r\n            this.maskEl = null;\r\n            this.placeholderEl = null;\r\n            this.heightAutoObserverWrapperEl = null;\r\n            this.heightAutoObserverEl = null;\r\n            this.rtlHelpers = null;\r\n            this.scrollbarWidth = 0;\r\n            this.resizeObserver = null;\r\n            this.mutationObserver = null;\r\n            this.elStyles = null;\r\n            this.isRtl = null;\r\n            this.mouseX = 0;\r\n            this.mouseY = 0;\r\n            this.onMouseMove = function () { };\r\n            this.onWindowResize = function () { };\r\n            this.onStopScrolling = function () { };\r\n            this.onMouseEntered = function () { };\r\n            /**\r\n             * On scroll event handling\r\n             */\r\n            this.onScroll = function () {\r\n                var elWindow = getElementWindow(_this.el);\r\n                if (!_this.scrollXTicking) {\r\n                    elWindow.requestAnimationFrame(_this.scrollX);\r\n                    _this.scrollXTicking = true;\r\n                }\r\n                if (!_this.scrollYTicking) {\r\n                    elWindow.requestAnimationFrame(_this.scrollY);\r\n                    _this.scrollYTicking = true;\r\n                }\r\n                if (!_this.isScrolling) {\r\n                    _this.isScrolling = true;\r\n                    addClasses$2(_this.el, _this.classNames.scrolling);\r\n                }\r\n                _this.showScrollbar('x');\r\n                _this.showScrollbar('y');\r\n                _this.onStopScrolling();\r\n            };\r\n            this.scrollX = function () {\r\n                if (_this.axis.x.isOverflowing) {\r\n                    _this.positionScrollbar('x');\r\n                }\r\n                _this.scrollXTicking = false;\r\n            };\r\n            this.scrollY = function () {\r\n                if (_this.axis.y.isOverflowing) {\r\n                    _this.positionScrollbar('y');\r\n                }\r\n                _this.scrollYTicking = false;\r\n            };\r\n            this._onStopScrolling = function () {\r\n                removeClasses(_this.el, _this.classNames.scrolling);\r\n                if (_this.options.autoHide) {\r\n                    _this.hideScrollbar('x');\r\n                    _this.hideScrollbar('y');\r\n                }\r\n                _this.isScrolling = false;\r\n            };\r\n            this.onMouseEnter = function () {\r\n                if (!_this.isMouseEntering) {\r\n                    addClasses$2(_this.el, _this.classNames.mouseEntered);\r\n                    _this.showScrollbar('x');\r\n                    _this.showScrollbar('y');\r\n                    _this.isMouseEntering = true;\r\n                }\r\n                _this.onMouseEntered();\r\n            };\r\n            this._onMouseEntered = function () {\r\n                removeClasses(_this.el, _this.classNames.mouseEntered);\r\n                if (_this.options.autoHide) {\r\n                    _this.hideScrollbar('x');\r\n                    _this.hideScrollbar('y');\r\n                }\r\n                _this.isMouseEntering = false;\r\n            };\r\n            this._onMouseMove = function (e) {\r\n                _this.mouseX = e.clientX;\r\n                _this.mouseY = e.clientY;\r\n                if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\r\n                    _this.onMouseMoveForAxis('x');\r\n                }\r\n                if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\r\n                    _this.onMouseMoveForAxis('y');\r\n                }\r\n            };\r\n            this.onMouseLeave = function () {\r\n                _this.onMouseMove.cancel();\r\n                if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\r\n                    _this.onMouseLeaveForAxis('x');\r\n                }\r\n                if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\r\n                    _this.onMouseLeaveForAxis('y');\r\n                }\r\n                _this.mouseX = -1;\r\n                _this.mouseY = -1;\r\n            };\r\n            this._onWindowResize = function () {\r\n                // Recalculate scrollbarWidth in case it's a zoom\r\n                _this.scrollbarWidth = _this.getScrollbarWidth();\r\n                _this.hideNativeScrollbar();\r\n            };\r\n            this.onPointerEvent = function (e) {\r\n                if (!_this.axis.x.track.el ||\r\n                    !_this.axis.y.track.el ||\r\n                    !_this.axis.x.scrollbar.el ||\r\n                    !_this.axis.y.scrollbar.el)\r\n                    return;\r\n                var isWithinTrackXBounds, isWithinTrackYBounds;\r\n                _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();\r\n                _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();\r\n                if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\r\n                    isWithinTrackXBounds = _this.isWithinBounds(_this.axis.x.track.rect);\r\n                }\r\n                if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\r\n                    isWithinTrackYBounds = _this.isWithinBounds(_this.axis.y.track.rect);\r\n                }\r\n                // If any pointer event is called on the scrollbar\r\n                if (isWithinTrackXBounds || isWithinTrackYBounds) {\r\n                    // Prevent event leaking\r\n                    e.stopPropagation();\r\n                    if (e.type === 'pointerdown' && e.pointerType !== 'touch') {\r\n                        if (isWithinTrackXBounds) {\r\n                            _this.axis.x.scrollbar.rect =\r\n                                _this.axis.x.scrollbar.el.getBoundingClientRect();\r\n                            if (_this.isWithinBounds(_this.axis.x.scrollbar.rect)) {\r\n                                _this.onDragStart(e, 'x');\r\n                            }\r\n                            else {\r\n                                _this.onTrackClick(e, 'x');\r\n                            }\r\n                        }\r\n                        if (isWithinTrackYBounds) {\r\n                            _this.axis.y.scrollbar.rect =\r\n                                _this.axis.y.scrollbar.el.getBoundingClientRect();\r\n                            if (_this.isWithinBounds(_this.axis.y.scrollbar.rect)) {\r\n                                _this.onDragStart(e, 'y');\r\n                            }\r\n                            else {\r\n                                _this.onTrackClick(e, 'y');\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            /**\r\n             * Drag scrollbar handle\r\n             */\r\n            this.drag = function (e) {\r\n                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\r\n                if (!_this.draggedAxis || !_this.contentWrapperEl)\r\n                    return;\r\n                var eventOffset;\r\n                var track = _this.axis[_this.draggedAxis].track;\r\n                var trackSize = (_b = (_a = track.rect) === null || _a === void 0 ? void 0 : _a[_this.axis[_this.draggedAxis].sizeAttr]) !== null && _b !== void 0 ? _b : 0;\r\n                var scrollbar = _this.axis[_this.draggedAxis].scrollbar;\r\n                var contentSize = (_d = (_c = _this.contentWrapperEl) === null || _c === void 0 ? void 0 : _c[_this.axis[_this.draggedAxis].scrollSizeAttr]) !== null && _d !== void 0 ? _d : 0;\r\n                var hostSize = parseInt((_f = (_e = _this.elStyles) === null || _e === void 0 ? void 0 : _e[_this.axis[_this.draggedAxis].sizeAttr]) !== null && _f !== void 0 ? _f : '0px', 10);\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                if (_this.draggedAxis === 'y') {\r\n                    eventOffset = e.pageY;\r\n                }\r\n                else {\r\n                    eventOffset = e.pageX;\r\n                }\r\n                // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\r\n                var dragPos = eventOffset -\r\n                    ((_h = (_g = track.rect) === null || _g === void 0 ? void 0 : _g[_this.axis[_this.draggedAxis].offsetAttr]) !== null && _h !== void 0 ? _h : 0) -\r\n                    _this.axis[_this.draggedAxis].dragOffset;\r\n                dragPos = _this.draggedAxis === 'x' && _this.isRtl\r\n                    ? ((_k = (_j = track.rect) === null || _j === void 0 ? void 0 : _j[_this.axis[_this.draggedAxis].sizeAttr]) !== null && _k !== void 0 ? _k : 0) -\r\n                        scrollbar.size -\r\n                        dragPos\r\n                    : dragPos;\r\n                // Convert the mouse position into a percentage of the scrollbar height/width.\r\n                var dragPerc = dragPos / (trackSize - scrollbar.size);\r\n                // Scroll the content by the same percentage.\r\n                var scrollPos = dragPerc * (contentSize - hostSize);\r\n                // Fix browsers inconsistency on RTL\r\n                if (_this.draggedAxis === 'x' && _this.isRtl) {\r\n                    scrollPos = ((_l = SimpleBarCore.getRtlHelpers()) === null || _l === void 0 ? void 0 : _l.isScrollingToNegative)\r\n                        ? -scrollPos\r\n                        : scrollPos;\r\n                }\r\n                _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollOffsetAttr] =\r\n                    scrollPos;\r\n            };\r\n            /**\r\n             * End scroll handle drag\r\n             */\r\n            this.onEndDrag = function (e) {\r\n                var elDocument = getElementDocument(_this.el);\r\n                var elWindow = getElementWindow(_this.el);\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                removeClasses(_this.el, _this.classNames.dragging);\r\n                elDocument.removeEventListener('mousemove', _this.drag, true);\r\n                elDocument.removeEventListener('mouseup', _this.onEndDrag, true);\r\n                _this.removePreventClickId = elWindow.setTimeout(function () {\r\n                    // Remove these asynchronously so we still suppress click events\r\n                    // generated simultaneously with mouseup.\r\n                    elDocument.removeEventListener('click', _this.preventClick, true);\r\n                    elDocument.removeEventListener('dblclick', _this.preventClick, true);\r\n                    _this.removePreventClickId = null;\r\n                });\r\n            };\r\n            /**\r\n             * Handler to ignore click events during drag\r\n             */\r\n            this.preventClick = function (e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            };\r\n            this.el = element;\r\n            this.options = __assign(__assign({}, SimpleBarCore.defaultOptions), options);\r\n            this.classNames = __assign(__assign({}, SimpleBarCore.defaultOptions.classNames), options.classNames);\r\n            this.axis = {\r\n                x: {\r\n                    scrollOffsetAttr: 'scrollLeft',\r\n                    sizeAttr: 'width',\r\n                    scrollSizeAttr: 'scrollWidth',\r\n                    offsetSizeAttr: 'offsetWidth',\r\n                    offsetAttr: 'left',\r\n                    overflowAttr: 'overflowX',\r\n                    dragOffset: 0,\r\n                    isOverflowing: true,\r\n                    forceVisible: false,\r\n                    track: { size: null, el: null, rect: null, isVisible: false },\r\n                    scrollbar: { size: null, el: null, rect: null, isVisible: false }\r\n                },\r\n                y: {\r\n                    scrollOffsetAttr: 'scrollTop',\r\n                    sizeAttr: 'height',\r\n                    scrollSizeAttr: 'scrollHeight',\r\n                    offsetSizeAttr: 'offsetHeight',\r\n                    offsetAttr: 'top',\r\n                    overflowAttr: 'overflowY',\r\n                    dragOffset: 0,\r\n                    isOverflowing: true,\r\n                    forceVisible: false,\r\n                    track: { size: null, el: null, rect: null, isVisible: false },\r\n                    scrollbar: { size: null, el: null, rect: null, isVisible: false }\r\n                }\r\n            };\r\n            if (typeof this.el !== 'object' || !this.el.nodeName) {\r\n                throw new Error(\"Argument passed to SimpleBar must be an HTML element instead of \".concat(this.el));\r\n            }\r\n            this.onMouseMove = throttle(this._onMouseMove, 64);\r\n            this.onWindowResize = debounce(this._onWindowResize, 64, { leading: true });\r\n            this.onStopScrolling = debounce(this._onStopScrolling, this.stopScrollDelay);\r\n            this.onMouseEntered = debounce(this._onMouseEntered, this.stopScrollDelay);\r\n            this.init();\r\n        }\r\n        /**\r\n         * Helper to fix browsers inconsistency on RTL:\r\n         *  - Firefox inverts the scrollbar initial position\r\n         *  - IE11 inverts both scrollbar position and scrolling offset\r\n         * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\r\n         */\r\n        SimpleBarCore.getRtlHelpers = function () {\r\n            if (SimpleBarCore.rtlHelpers) {\r\n                return SimpleBarCore.rtlHelpers;\r\n            }\r\n            var dummyDiv = document.createElement('div');\r\n            dummyDiv.innerHTML =\r\n                '<div class=\"simplebar-dummy-scrollbar-size\"><div></div></div>';\r\n            var scrollbarDummyEl = dummyDiv.firstElementChild;\r\n            var dummyChild = scrollbarDummyEl === null || scrollbarDummyEl === void 0 ? void 0 : scrollbarDummyEl.firstElementChild;\r\n            if (!dummyChild)\r\n                return null;\r\n            document.body.appendChild(scrollbarDummyEl);\r\n            scrollbarDummyEl.scrollLeft = 0;\r\n            var dummyContainerOffset = SimpleBarCore.getOffset(scrollbarDummyEl);\r\n            var dummyChildOffset = SimpleBarCore.getOffset(dummyChild);\r\n            scrollbarDummyEl.scrollLeft = -999;\r\n            var dummyChildOffsetAfterScroll = SimpleBarCore.getOffset(dummyChild);\r\n            document.body.removeChild(scrollbarDummyEl);\r\n            SimpleBarCore.rtlHelpers = {\r\n                // determines if the scrolling is responding with negative values\r\n                isScrollOriginAtZero: dummyContainerOffset.left !== dummyChildOffset.left,\r\n                // determines if the origin scrollbar position is inverted or not (positioned on left or right)\r\n                isScrollingToNegative: dummyChildOffset.left !== dummyChildOffsetAfterScroll.left\r\n            };\r\n            return SimpleBarCore.rtlHelpers;\r\n        };\r\n        SimpleBarCore.prototype.getScrollbarWidth = function () {\r\n            // Try/catch for FF 56 throwing on undefined computedStyles\r\n            try {\r\n                // Detect browsers supporting CSS scrollbar styling and do not calculate\r\n                if ((this.contentWrapperEl &&\r\n                    getComputedStyle(this.contentWrapperEl, '::-webkit-scrollbar')\r\n                        .display === 'none') ||\r\n                    'scrollbarWidth' in document.documentElement.style ||\r\n                    '-ms-overflow-style' in document.documentElement.style) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return scrollbarWidth();\r\n                }\r\n            }\r\n            catch (e) {\r\n                return scrollbarWidth();\r\n            }\r\n        };\r\n        SimpleBarCore.getOffset = function (el) {\r\n            var rect = el.getBoundingClientRect();\r\n            var elDocument = getElementDocument(el);\r\n            var elWindow = getElementWindow(el);\r\n            return {\r\n                top: rect.top +\r\n                    (elWindow.pageYOffset || elDocument.documentElement.scrollTop),\r\n                left: rect.left +\r\n                    (elWindow.pageXOffset || elDocument.documentElement.scrollLeft)\r\n            };\r\n        };\r\n        SimpleBarCore.prototype.init = function () {\r\n            // We stop here on server-side\r\n            if (canUseDom) {\r\n                this.initDOM();\r\n                this.rtlHelpers = SimpleBarCore.getRtlHelpers();\r\n                this.scrollbarWidth = this.getScrollbarWidth();\r\n                this.recalculate();\r\n                this.initListeners();\r\n            }\r\n        };\r\n        SimpleBarCore.prototype.initDOM = function () {\r\n            var _a, _b;\r\n            // assume that element has his DOM already initiated\r\n            this.wrapperEl = this.el.querySelector(classNamesToQuery(this.classNames.wrapper));\r\n            this.contentWrapperEl =\r\n                this.options.scrollableNode ||\r\n                    this.el.querySelector(classNamesToQuery(this.classNames.contentWrapper));\r\n            this.contentEl =\r\n                this.options.contentNode ||\r\n                    this.el.querySelector(classNamesToQuery(this.classNames.contentEl));\r\n            this.offsetEl = this.el.querySelector(classNamesToQuery(this.classNames.offset));\r\n            this.maskEl = this.el.querySelector(classNamesToQuery(this.classNames.mask));\r\n            this.placeholderEl = this.findChild(this.wrapperEl, classNamesToQuery(this.classNames.placeholder));\r\n            this.heightAutoObserverWrapperEl = this.el.querySelector(classNamesToQuery(this.classNames.heightAutoObserverWrapperEl));\r\n            this.heightAutoObserverEl = this.el.querySelector(classNamesToQuery(this.classNames.heightAutoObserverEl));\r\n            this.axis.x.track.el = this.findChild(this.el, \"\".concat(classNamesToQuery(this.classNames.track)).concat(classNamesToQuery(this.classNames.horizontal)));\r\n            this.axis.y.track.el = this.findChild(this.el, \"\".concat(classNamesToQuery(this.classNames.track)).concat(classNamesToQuery(this.classNames.vertical)));\r\n            this.axis.x.scrollbar.el =\r\n                ((_a = this.axis.x.track.el) === null || _a === void 0 ? void 0 : _a.querySelector(classNamesToQuery(this.classNames.scrollbar))) || null;\r\n            this.axis.y.scrollbar.el =\r\n                ((_b = this.axis.y.track.el) === null || _b === void 0 ? void 0 : _b.querySelector(classNamesToQuery(this.classNames.scrollbar))) || null;\r\n            if (!this.options.autoHide) {\r\n                addClasses$2(this.axis.x.scrollbar.el, this.classNames.visible);\r\n                addClasses$2(this.axis.y.scrollbar.el, this.classNames.visible);\r\n            }\r\n        };\r\n        SimpleBarCore.prototype.initListeners = function () {\r\n            var _this = this;\r\n            var _a;\r\n            var elWindow = getElementWindow(this.el);\r\n            // Event listeners\r\n            this.el.addEventListener('mouseenter', this.onMouseEnter);\r\n            this.el.addEventListener('pointerdown', this.onPointerEvent, true);\r\n            this.el.addEventListener('mousemove', this.onMouseMove);\r\n            this.el.addEventListener('mouseleave', this.onMouseLeave);\r\n            (_a = this.contentWrapperEl) === null || _a === void 0 ? void 0 : _a.addEventListener('scroll', this.onScroll);\r\n            // Browser zoom triggers a window resize\r\n            elWindow.addEventListener('resize', this.onWindowResize);\r\n            if (!this.contentEl)\r\n                return;\r\n            if (window.ResizeObserver) {\r\n                // Hack for https://github.com/WICG/ResizeObserver/issues/38\r\n                var resizeObserverStarted_1 = false;\r\n                var resizeObserver = elWindow.ResizeObserver || ResizeObserver;\r\n                this.resizeObserver = new resizeObserver(function () {\r\n                    if (!resizeObserverStarted_1)\r\n                        return;\r\n                    elWindow.requestAnimationFrame(function () {\r\n                        _this.recalculate();\r\n                    });\r\n                });\r\n                this.resizeObserver.observe(this.el);\r\n                this.resizeObserver.observe(this.contentEl);\r\n                elWindow.requestAnimationFrame(function () {\r\n                    resizeObserverStarted_1 = true;\r\n                });\r\n            }\r\n            // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.\r\n            this.mutationObserver = new elWindow.MutationObserver(function () {\r\n                elWindow.requestAnimationFrame(function () {\r\n                    _this.recalculate();\r\n                });\r\n            });\r\n            this.mutationObserver.observe(this.contentEl, {\r\n                childList: true,\r\n                subtree: true,\r\n                characterData: true\r\n            });\r\n        };\r\n        SimpleBarCore.prototype.recalculate = function () {\r\n            if (!this.heightAutoObserverEl ||\r\n                !this.contentEl ||\r\n                !this.contentWrapperEl ||\r\n                !this.wrapperEl ||\r\n                !this.placeholderEl)\r\n                return;\r\n            var elWindow = getElementWindow(this.el);\r\n            this.elStyles = elWindow.getComputedStyle(this.el);\r\n            this.isRtl = this.elStyles.direction === 'rtl';\r\n            var contentElOffsetWidth = this.contentEl.offsetWidth;\r\n            var isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\r\n            var isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1 || contentElOffsetWidth > 0;\r\n            var contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;\r\n            var elOverflowX = this.elStyles.overflowX;\r\n            var elOverflowY = this.elStyles.overflowY;\r\n            this.contentEl.style.padding = \"\".concat(this.elStyles.paddingTop, \" \").concat(this.elStyles.paddingRight, \" \").concat(this.elStyles.paddingBottom, \" \").concat(this.elStyles.paddingLeft);\r\n            this.wrapperEl.style.margin = \"-\".concat(this.elStyles.paddingTop, \" -\").concat(this.elStyles.paddingRight, \" -\").concat(this.elStyles.paddingBottom, \" -\").concat(this.elStyles.paddingLeft);\r\n            var contentElScrollHeight = this.contentEl.scrollHeight;\r\n            var contentElScrollWidth = this.contentEl.scrollWidth;\r\n            this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%';\r\n            // Determine placeholder size\r\n            this.placeholderEl.style.width = isWidthAuto\r\n                ? \"\".concat(contentElOffsetWidth || contentElScrollWidth, \"px\")\r\n                : 'auto';\r\n            this.placeholderEl.style.height = \"\".concat(contentElScrollHeight, \"px\");\r\n            var contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;\r\n            this.axis.x.isOverflowing =\r\n                contentElOffsetWidth !== 0 && contentElScrollWidth > contentElOffsetWidth;\r\n            this.axis.y.isOverflowing =\r\n                contentElScrollHeight > contentWrapperElOffsetHeight;\r\n            // Set isOverflowing to false if user explicitely set hidden overflow\r\n            this.axis.x.isOverflowing =\r\n                elOverflowX === 'hidden' ? false : this.axis.x.isOverflowing;\r\n            this.axis.y.isOverflowing =\r\n                elOverflowY === 'hidden' ? false : this.axis.y.isOverflowing;\r\n            this.axis.x.forceVisible =\r\n                this.options.forceVisible === 'x' || this.options.forceVisible === true;\r\n            this.axis.y.forceVisible =\r\n                this.options.forceVisible === 'y' || this.options.forceVisible === true;\r\n            this.hideNativeScrollbar();\r\n            // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\r\n            var offsetForXScrollbar = this.axis.x.isOverflowing\r\n                ? this.scrollbarWidth\r\n                : 0;\r\n            var offsetForYScrollbar = this.axis.y.isOverflowing\r\n                ? this.scrollbarWidth\r\n                : 0;\r\n            this.axis.x.isOverflowing =\r\n                this.axis.x.isOverflowing &&\r\n                    contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;\r\n            this.axis.y.isOverflowing =\r\n                this.axis.y.isOverflowing &&\r\n                    contentElScrollHeight >\r\n                        contentWrapperElOffsetHeight - offsetForXScrollbar;\r\n            this.axis.x.scrollbar.size = this.getScrollbarSize('x');\r\n            this.axis.y.scrollbar.size = this.getScrollbarSize('y');\r\n            if (this.axis.x.scrollbar.el)\r\n                this.axis.x.scrollbar.el.style.width = \"\".concat(this.axis.x.scrollbar.size, \"px\");\r\n            if (this.axis.y.scrollbar.el)\r\n                this.axis.y.scrollbar.el.style.height = \"\".concat(this.axis.y.scrollbar.size, \"px\");\r\n            this.positionScrollbar('x');\r\n            this.positionScrollbar('y');\r\n            this.toggleTrackVisibility('x');\r\n            this.toggleTrackVisibility('y');\r\n        };\r\n        /**\r\n         * Calculate scrollbar size\r\n         */\r\n        SimpleBarCore.prototype.getScrollbarSize = function (axis) {\r\n            var _a, _b;\r\n            if (axis === void 0) { axis = 'y'; }\r\n            if (!this.axis[axis].isOverflowing || !this.contentEl) {\r\n                return 0;\r\n            }\r\n            var contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];\r\n            var trackSize = (_b = (_a = this.axis[axis].track.el) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetSizeAttr]) !== null && _b !== void 0 ? _b : 0;\r\n            var scrollbarRatio = trackSize / contentSize;\r\n            var scrollbarSize;\r\n            // Calculate new height/position of drag handle.\r\n            scrollbarSize = Math.max(~~(scrollbarRatio * trackSize), this.options.scrollbarMinSize);\r\n            if (this.options.scrollbarMaxSize) {\r\n                scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\r\n            }\r\n            return scrollbarSize;\r\n        };\r\n        SimpleBarCore.prototype.positionScrollbar = function (axis) {\r\n            var _a, _b, _c;\r\n            if (axis === void 0) { axis = 'y'; }\r\n            var scrollbar = this.axis[axis].scrollbar;\r\n            if (!this.axis[axis].isOverflowing ||\r\n                !this.contentWrapperEl ||\r\n                !scrollbar.el ||\r\n                !this.elStyles) {\r\n                return;\r\n            }\r\n            var contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\r\n            var trackSize = ((_a = this.axis[axis].track.el) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetSizeAttr]) || 0;\r\n            var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\r\n            var scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\r\n            scrollOffset =\r\n                axis === 'x' &&\r\n                    this.isRtl &&\r\n                    ((_b = SimpleBarCore.getRtlHelpers()) === null || _b === void 0 ? void 0 : _b.isScrollOriginAtZero)\r\n                    ? -scrollOffset\r\n                    : scrollOffset;\r\n            if (axis === 'x' && this.isRtl) {\r\n                scrollOffset = ((_c = SimpleBarCore.getRtlHelpers()) === null || _c === void 0 ? void 0 : _c.isScrollingToNegative)\r\n                    ? scrollOffset\r\n                    : -scrollOffset;\r\n            }\r\n            var scrollPourcent = scrollOffset / (contentSize - hostSize);\r\n            var handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\r\n            handleOffset =\r\n                axis === 'x' && this.isRtl\r\n                    ? -handleOffset + (trackSize - scrollbar.size)\r\n                    : handleOffset;\r\n            scrollbar.el.style.transform =\r\n                axis === 'x'\r\n                    ? \"translate3d(\".concat(handleOffset, \"px, 0, 0)\")\r\n                    : \"translate3d(0, \".concat(handleOffset, \"px, 0)\");\r\n        };\r\n        SimpleBarCore.prototype.toggleTrackVisibility = function (axis) {\r\n            if (axis === void 0) { axis = 'y'; }\r\n            var track = this.axis[axis].track.el;\r\n            var scrollbar = this.axis[axis].scrollbar.el;\r\n            if (!track || !scrollbar || !this.contentWrapperEl)\r\n                return;\r\n            if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\r\n                track.style.visibility = 'visible';\r\n                this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\r\n                this.el.classList.add(\"\".concat(this.classNames.scrollable, \"-\").concat(axis));\r\n            }\r\n            else {\r\n                track.style.visibility = 'hidden';\r\n                this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\r\n                this.el.classList.remove(\"\".concat(this.classNames.scrollable, \"-\").concat(axis));\r\n            }\r\n            // Even if forceVisible is enabled, scrollbar itself should be hidden\r\n            if (this.axis[axis].isOverflowing) {\r\n                scrollbar.style.display = 'block';\r\n            }\r\n            else {\r\n                scrollbar.style.display = 'none';\r\n            }\r\n        };\r\n        SimpleBarCore.prototype.showScrollbar = function (axis) {\r\n            if (axis === void 0) { axis = 'y'; }\r\n            if (this.axis[axis].isOverflowing && !this.axis[axis].scrollbar.isVisible) {\r\n                addClasses$2(this.axis[axis].scrollbar.el, this.classNames.visible);\r\n                this.axis[axis].scrollbar.isVisible = true;\r\n            }\r\n        };\r\n        SimpleBarCore.prototype.hideScrollbar = function (axis) {\r\n            if (axis === void 0) { axis = 'y'; }\r\n            if (this.axis[axis].isOverflowing && this.axis[axis].scrollbar.isVisible) {\r\n                removeClasses(this.axis[axis].scrollbar.el, this.classNames.visible);\r\n                this.axis[axis].scrollbar.isVisible = false;\r\n            }\r\n        };\r\n        SimpleBarCore.prototype.hideNativeScrollbar = function () {\r\n            if (!this.offsetEl)\r\n                return;\r\n            this.offsetEl.style[this.isRtl ? 'left' : 'right'] =\r\n                this.axis.y.isOverflowing || this.axis.y.forceVisible\r\n                    ? \"-\".concat(this.scrollbarWidth, \"px\")\r\n                    : '0px';\r\n            this.offsetEl.style.bottom =\r\n                this.axis.x.isOverflowing || this.axis.x.forceVisible\r\n                    ? \"-\".concat(this.scrollbarWidth, \"px\")\r\n                    : '0px';\r\n        };\r\n        SimpleBarCore.prototype.onMouseMoveForAxis = function (axis) {\r\n            if (axis === void 0) { axis = 'y'; }\r\n            var currentAxis = this.axis[axis];\r\n            if (!currentAxis.track.el || !currentAxis.scrollbar.el)\r\n                return;\r\n            currentAxis.track.rect = currentAxis.track.el.getBoundingClientRect();\r\n            currentAxis.scrollbar.rect =\r\n                currentAxis.scrollbar.el.getBoundingClientRect();\r\n            if (this.isWithinBounds(currentAxis.track.rect)) {\r\n                this.showScrollbar(axis);\r\n                addClasses$2(currentAxis.track.el, this.classNames.hover);\r\n                if (this.isWithinBounds(currentAxis.scrollbar.rect)) {\r\n                    addClasses$2(currentAxis.scrollbar.el, this.classNames.hover);\r\n                }\r\n                else {\r\n                    removeClasses(currentAxis.scrollbar.el, this.classNames.hover);\r\n                }\r\n            }\r\n            else {\r\n                removeClasses(currentAxis.track.el, this.classNames.hover);\r\n                if (this.options.autoHide) {\r\n                    this.hideScrollbar(axis);\r\n                }\r\n            }\r\n        };\r\n        SimpleBarCore.prototype.onMouseLeaveForAxis = function (axis) {\r\n            if (axis === void 0) { axis = 'y'; }\r\n            removeClasses(this.axis[axis].track.el, this.classNames.hover);\r\n            removeClasses(this.axis[axis].scrollbar.el, this.classNames.hover);\r\n            if (this.options.autoHide) {\r\n                this.hideScrollbar(axis);\r\n            }\r\n        };\r\n        /**\r\n         * on scrollbar handle drag movement starts\r\n         */\r\n        SimpleBarCore.prototype.onDragStart = function (e, axis) {\r\n            var _a;\r\n            if (axis === void 0) { axis = 'y'; }\r\n            var elDocument = getElementDocument(this.el);\r\n            var elWindow = getElementWindow(this.el);\r\n            var scrollbar = this.axis[axis].scrollbar;\r\n            // Measure how far the user's mouse is from the top of the scrollbar drag handle.\r\n            var eventOffset = axis === 'y' ? e.pageY : e.pageX;\r\n            this.axis[axis].dragOffset =\r\n                eventOffset - (((_a = scrollbar.rect) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetAttr]) || 0);\r\n            this.draggedAxis = axis;\r\n            addClasses$2(this.el, this.classNames.dragging);\r\n            elDocument.addEventListener('mousemove', this.drag, true);\r\n            elDocument.addEventListener('mouseup', this.onEndDrag, true);\r\n            if (this.removePreventClickId === null) {\r\n                elDocument.addEventListener('click', this.preventClick, true);\r\n                elDocument.addEventListener('dblclick', this.preventClick, true);\r\n            }\r\n            else {\r\n                elWindow.clearTimeout(this.removePreventClickId);\r\n                this.removePreventClickId = null;\r\n            }\r\n        };\r\n        SimpleBarCore.prototype.onTrackClick = function (e, axis) {\r\n            var _this = this;\r\n            var _a, _b, _c, _d;\r\n            if (axis === void 0) { axis = 'y'; }\r\n            var currentAxis = this.axis[axis];\r\n            if (!this.options.clickOnTrack ||\r\n                !currentAxis.scrollbar.el ||\r\n                !this.contentWrapperEl)\r\n                return;\r\n            // Preventing the event's default to trigger click underneath\r\n            e.preventDefault();\r\n            var elWindow = getElementWindow(this.el);\r\n            this.axis[axis].scrollbar.rect =\r\n                currentAxis.scrollbar.el.getBoundingClientRect();\r\n            var scrollbar = this.axis[axis].scrollbar;\r\n            var scrollbarOffset = (_b = (_a = scrollbar.rect) === null || _a === void 0 ? void 0 : _a[this.axis[axis].offsetAttr]) !== null && _b !== void 0 ? _b : 0;\r\n            var hostSize = parseInt((_d = (_c = this.elStyles) === null || _c === void 0 ? void 0 : _c[this.axis[axis].sizeAttr]) !== null && _d !== void 0 ? _d : '0px', 10);\r\n            var scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\r\n            var t = axis === 'y'\r\n                ? this.mouseY - scrollbarOffset\r\n                : this.mouseX - scrollbarOffset;\r\n            var dir = t < 0 ? -1 : 1;\r\n            var scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;\r\n            var speed = 40;\r\n            var scrollTo = function () {\r\n                if (!_this.contentWrapperEl)\r\n                    return;\r\n                if (dir === -1) {\r\n                    if (scrolled > scrollSize) {\r\n                        scrolled -= speed;\r\n                        _this.contentWrapperEl[_this.axis[axis].scrollOffsetAttr] = scrolled;\r\n                        elWindow.requestAnimationFrame(scrollTo);\r\n                    }\r\n                }\r\n                else {\r\n                    if (scrolled < scrollSize) {\r\n                        scrolled += speed;\r\n                        _this.contentWrapperEl[_this.axis[axis].scrollOffsetAttr] = scrolled;\r\n                        elWindow.requestAnimationFrame(scrollTo);\r\n                    }\r\n                }\r\n            };\r\n            scrollTo();\r\n        };\r\n        /**\r\n         * Getter for content element\r\n         */\r\n        SimpleBarCore.prototype.getContentElement = function () {\r\n            return this.contentEl;\r\n        };\r\n        /**\r\n         * Getter for original scrolling element\r\n         */\r\n        SimpleBarCore.prototype.getScrollElement = function () {\r\n            return this.contentWrapperEl;\r\n        };\r\n        SimpleBarCore.prototype.removeListeners = function () {\r\n            var elWindow = getElementWindow(this.el);\r\n            // Event listeners\r\n            this.el.removeEventListener('mouseenter', this.onMouseEnter);\r\n            this.el.removeEventListener('pointerdown', this.onPointerEvent, true);\r\n            this.el.removeEventListener('mousemove', this.onMouseMove);\r\n            this.el.removeEventListener('mouseleave', this.onMouseLeave);\r\n            if (this.contentWrapperEl) {\r\n                this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\r\n            }\r\n            elWindow.removeEventListener('resize', this.onWindowResize);\r\n            if (this.mutationObserver) {\r\n                this.mutationObserver.disconnect();\r\n            }\r\n            if (this.resizeObserver) {\r\n                this.resizeObserver.disconnect();\r\n            }\r\n            // Cancel all debounced functions\r\n            this.onMouseMove.cancel();\r\n            this.onWindowResize.cancel();\r\n            this.onStopScrolling.cancel();\r\n            this.onMouseEntered.cancel();\r\n        };\r\n        /**\r\n         * Remove all listeners from DOM nodes\r\n         */\r\n        SimpleBarCore.prototype.unMount = function () {\r\n            this.removeListeners();\r\n        };\r\n        /**\r\n         * Check if mouse is within bounds\r\n         */\r\n        SimpleBarCore.prototype.isWithinBounds = function (bbox) {\r\n            return (this.mouseX >= bbox.left &&\r\n                this.mouseX <= bbox.left + bbox.width &&\r\n                this.mouseY >= bbox.top &&\r\n                this.mouseY <= bbox.top + bbox.height);\r\n        };\r\n        /**\r\n         * Find element children matches query\r\n         */\r\n        SimpleBarCore.prototype.findChild = function (el, query) {\r\n            var matches = el.matches ||\r\n                el.webkitMatchesSelector ||\r\n                el.mozMatchesSelector ||\r\n                el.msMatchesSelector;\r\n            return Array.prototype.filter.call(el.children, function (child) {\r\n                return matches.call(child, query);\r\n            })[0];\r\n        };\r\n        SimpleBarCore.rtlHelpers = null;\r\n        SimpleBarCore.defaultOptions = {\r\n            forceVisible: false,\r\n            clickOnTrack: true,\r\n            scrollbarMinSize: 25,\r\n            scrollbarMaxSize: 0,\r\n            ariaLabel: 'scrollable content',\r\n            classNames: {\r\n                contentEl: 'simplebar-content',\r\n                contentWrapper: 'simplebar-content-wrapper',\r\n                offset: 'simplebar-offset',\r\n                mask: 'simplebar-mask',\r\n                wrapper: 'simplebar-wrapper',\r\n                placeholder: 'simplebar-placeholder',\r\n                scrollbar: 'simplebar-scrollbar',\r\n                track: 'simplebar-track',\r\n                heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\r\n                heightAutoObserverEl: 'simplebar-height-auto-observer',\r\n                visible: 'simplebar-visible',\r\n                horizontal: 'simplebar-horizontal',\r\n                vertical: 'simplebar-vertical',\r\n                hover: 'simplebar-hover',\r\n                dragging: 'simplebar-dragging',\r\n                scrolling: 'simplebar-scrolling',\r\n                scrollable: 'simplebar-scrollable',\r\n                mouseEntered: 'simplebar-mouse-entered'\r\n            },\r\n            scrollableNode: null,\r\n            contentNode: null,\r\n            autoHide: true\r\n        };\r\n        /**\r\n         * Static functions\r\n         */\r\n        SimpleBarCore.getOptions = getOptions$2;\r\n        SimpleBarCore.helpers = helpers;\r\n        return SimpleBarCore;\r\n    }());\r\n\r\n    var _a = SimpleBarCore.helpers, getOptions = _a.getOptions, addClasses = _a.addClasses;\r\n    var SimpleBar = /** @class */ (function (_super) {\r\n        __extends(SimpleBar, _super);\r\n        function SimpleBar() {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            var _this = _super.apply(this, args) || this;\r\n            // // Save a reference to the instance, so we know this DOM node has already been instancied\r\n            SimpleBar.instances.set(args[0], _this);\r\n            return _this;\r\n        }\r\n        SimpleBar.initDOMLoadedElements = function () {\r\n            document.removeEventListener('DOMContentLoaded', this.initDOMLoadedElements);\r\n            window.removeEventListener('load', this.initDOMLoadedElements);\r\n            Array.prototype.forEach.call(document.querySelectorAll('[data-simplebar]'), function (el) {\r\n                if (el.getAttribute('data-simplebar') !== 'init' &&\r\n                    !SimpleBar.instances.has(el))\r\n                    new SimpleBar(el, getOptions(el.attributes));\r\n            });\r\n        };\r\n        SimpleBar.removeObserver = function () {\r\n            var _a;\r\n            (_a = SimpleBar.globalObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\r\n        };\r\n        SimpleBar.prototype.initDOM = function () {\r\n            var _this = this;\r\n            var _a, _b, _c;\r\n            // make sure this element doesn't have the elements yet\r\n            if (!Array.prototype.filter.call(this.el.children, function (child) {\r\n                return child.classList.contains(_this.classNames.wrapper);\r\n            }).length) {\r\n                // Prepare DOM\r\n                this.wrapperEl = document.createElement('div');\r\n                this.contentWrapperEl = document.createElement('div');\r\n                this.offsetEl = document.createElement('div');\r\n                this.maskEl = document.createElement('div');\r\n                this.contentEl = document.createElement('div');\r\n                this.placeholderEl = document.createElement('div');\r\n                this.heightAutoObserverWrapperEl = document.createElement('div');\r\n                this.heightAutoObserverEl = document.createElement('div');\r\n                addClasses(this.wrapperEl, this.classNames.wrapper);\r\n                addClasses(this.contentWrapperEl, this.classNames.contentWrapper);\r\n                addClasses(this.offsetEl, this.classNames.offset);\r\n                addClasses(this.maskEl, this.classNames.mask);\r\n                addClasses(this.contentEl, this.classNames.contentEl);\r\n                addClasses(this.placeholderEl, this.classNames.placeholder);\r\n                addClasses(this.heightAutoObserverWrapperEl, this.classNames.heightAutoObserverWrapperEl);\r\n                addClasses(this.heightAutoObserverEl, this.classNames.heightAutoObserverEl);\r\n                while (this.el.firstChild) {\r\n                    this.contentEl.appendChild(this.el.firstChild);\r\n                }\r\n                this.contentWrapperEl.appendChild(this.contentEl);\r\n                this.offsetEl.appendChild(this.contentWrapperEl);\r\n                this.maskEl.appendChild(this.offsetEl);\r\n                this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);\r\n                this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);\r\n                this.wrapperEl.appendChild(this.maskEl);\r\n                this.wrapperEl.appendChild(this.placeholderEl);\r\n                this.el.appendChild(this.wrapperEl);\r\n                (_a = this.contentWrapperEl) === null || _a === void 0 ? void 0 : _a.setAttribute('tabindex', '0');\r\n                (_b = this.contentWrapperEl) === null || _b === void 0 ? void 0 : _b.setAttribute('role', 'region');\r\n                (_c = this.contentWrapperEl) === null || _c === void 0 ? void 0 : _c.setAttribute('aria-label', this.options.ariaLabel);\r\n            }\r\n            if (!this.axis.x.track.el || !this.axis.y.track.el) {\r\n                var track = document.createElement('div');\r\n                var scrollbar = document.createElement('div');\r\n                addClasses(track, this.classNames.track);\r\n                addClasses(scrollbar, this.classNames.scrollbar);\r\n                track.appendChild(scrollbar);\r\n                this.axis.x.track.el = track.cloneNode(true);\r\n                addClasses(this.axis.x.track.el, this.classNames.horizontal);\r\n                this.axis.y.track.el = track.cloneNode(true);\r\n                addClasses(this.axis.y.track.el, this.classNames.vertical);\r\n                this.el.appendChild(this.axis.x.track.el);\r\n                this.el.appendChild(this.axis.y.track.el);\r\n            }\r\n            SimpleBarCore.prototype.initDOM.call(this);\r\n            this.el.setAttribute('data-simplebar', 'init');\r\n        };\r\n        SimpleBar.prototype.unMount = function () {\r\n            SimpleBarCore.prototype.unMount.call(this);\r\n            SimpleBar.instances[\"delete\"](this.el);\r\n        };\r\n        SimpleBar.initHtmlApi = function () {\r\n            this.initDOMLoadedElements = this.initDOMLoadedElements.bind(this);\r\n            // MutationObserver is IE11+\r\n            if (typeof MutationObserver !== 'undefined') {\r\n                // Mutation observer to observe dynamically added elements\r\n                this.globalObserver = new MutationObserver(SimpleBar.handleMutations);\r\n                this.globalObserver.observe(document, { childList: true, subtree: true });\r\n            }\r\n            // Taken from jQuery `ready` function\r\n            // Instantiate elements already present on the page\r\n            if (document.readyState === 'complete' || // @ts-ignore: IE specific\r\n                (document.readyState !== 'loading' && !document.documentElement.doScroll)) {\r\n                // Handle it asynchronously to allow scripts the opportunity to delay init\r\n                window.setTimeout(this.initDOMLoadedElements);\r\n            }\r\n            else {\r\n                document.addEventListener('DOMContentLoaded', this.initDOMLoadedElements);\r\n                window.addEventListener('load', this.initDOMLoadedElements);\r\n            }\r\n        };\r\n        SimpleBar.handleMutations = function (mutations) {\r\n            mutations.forEach(function (mutation) {\r\n                mutation.addedNodes.forEach(function (addedNode) {\r\n                    if (addedNode.nodeType === 1) {\r\n                        if (addedNode.hasAttribute('data-simplebar')) {\r\n                            !SimpleBar.instances.has(addedNode) &&\r\n                                document.documentElement.contains(addedNode) &&\r\n                                new SimpleBar(addedNode, getOptions(addedNode.attributes));\r\n                        }\r\n                        else {\r\n                            addedNode\r\n                                .querySelectorAll('[data-simplebar]')\r\n                                .forEach(function (el) {\r\n                                if (el.getAttribute('data-simplebar') !== 'init' &&\r\n                                    !SimpleBar.instances.has(el) &&\r\n                                    document.documentElement.contains(el))\r\n                                    new SimpleBar(el, getOptions(el.attributes));\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n                mutation.removedNodes.forEach(function (removedNode) {\r\n                    if (removedNode.nodeType === 1) {\r\n                        if (removedNode.getAttribute('data-simplebar') === 'init') {\r\n                            SimpleBar.instances.has(removedNode) &&\r\n                                !document.documentElement.contains(removedNode) &&\r\n                                SimpleBar.instances.get(removedNode).unMount();\r\n                        }\r\n                        else {\r\n                            Array.prototype.forEach.call(removedNode.querySelectorAll('[data-simplebar=\"init\"]'), function (el) {\r\n                                SimpleBar.instances.has(el) &&\r\n                                    !document.documentElement.contains(el) &&\r\n                                    SimpleBar.instances.get(el).unMount();\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        SimpleBar.instances = new WeakMap();\r\n        return SimpleBar;\r\n    }(SimpleBarCore));\r\n    /**\r\n     * HTML API\r\n     * Called only in a browser env.\r\n     */\r\n    if (canUseDom) {\r\n        SimpleBar.initHtmlApi();\r\n    }\r\n\r\n    // return SimpleBar;\r\n\r\n})();","let settings = {\r\n    default : {\r\n        themeMode : 'auto',\r\n        themeSidebar : 'default',\r\n        themeColor : 'success',\r\n    },\r\n    get : (key = '') => {\r\n        let value;\r\n        try {\r\n            value = JSON.parse(localStorage.getItem('lazy-settings'))\r\n            if(!value) throw new Error();\r\n        } catch {\r\n            localStorage.setItem('lazy-settings', JSON.stringify(settings.default))\r\n        }\r\n        value = JSON.parse(localStorage.getItem('lazy-settings'))\r\n        if(key) return value[key]\r\n        return value\r\n    },\r\n    set : (key, value) => {\r\n        localStorage.setItem('lazy-settings', JSON.stringify({\r\n            ...settings.get(),\r\n            [key] : value\r\n        }))\r\n    },\r\n    validate : {\r\n        themeMode : ['auto', 'light', 'dark'],\r\n        themeSidebar : ['default', 'v2'],\r\n        themeColor : ['success', 'indigo', 'info', 'warning', 'danger']\r\n    }\r\n}\r\n\r\nconst fullscreen = document.querySelector(\"._lazy-settings-btn-fullscreen\")\r\nif(fullscreen) {\r\n    fullscreen.addEventListener(\"click\", () => {\r\n        if(document.fullscreenElement) {\r\n            fullscreen.innerHTML = `<i class=\"fa-duotone fa-expand\"></i> Fullscreen`\r\n            document.exitFullscreen()\r\n        } else {\r\n            fullscreen.innerHTML = `<i class=\"fa-duotone fa-minimize\"></i> Exit Fullscreen`\r\n            document.documentElement.requestFullscreen()\r\n        }\r\n    })\r\n}\r\n\r\ntoggleTheme(settings.get(\"themeMode\"));\r\n\r\nfunction toggleTheme(ctheme = 'auto') {\r\n    settings.set(\"themeMode\", settings.validate.themeMode.includes(ctheme) ? ctheme : 'auto')\r\n    document.querySelector(\"._lazy-settings-widget-wrapper button[lazy-theme-toggle].is-active\")?.classList.remove(\"is-active\");\r\n    document.querySelector(`._lazy-settings-widget-wrapper button[lazy-theme-toggle=\"${settings.get(\"themeMode\")}\"]`)?.classList.add(\"is-active\");\r\n    document.querySelector(\"html\").setAttribute('theme-mode', settings.get(\"themeMode\") == 'auto' ? window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light' : settings.get(\"themeMode\"));\r\n}\r\n\r\n// press ctrl + d\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.ctrlKey && event.key === 'd') {\r\n        event.preventDefault();\r\n        toggleTheme(settings.get(\"themeMode\") == 'dark' ? 'light' : settings.get(\"themeMode\") == 'auto' ? 'light' : 'dark');\r\n    }\r\n})\r\n\r\ndocument.querySelectorAll(\"[lazy-theme-toggle]\").forEach((element) => {\r\n    element.addEventListener(\"click\", () => {\r\n        const value = element.getAttribute(\"lazy-theme-toggle\");\r\n        toggleTheme(value ? value : settings.get(\"themeMode\") == 'dark' ? 'light' : 'dark');\r\n    })\r\n})\r\n// theme handler end\r\n\r\n\r\n// sidebar handler start\r\ntoggleVersionSidebar(settings.get(\"themeSidebar\"));\r\n\r\nfunction toggleVersionSidebar(v) {\r\n    settings.set('themeSidebar', settings.validate.themeSidebar.includes(v) ? v : 'default');\r\n\r\n    document.querySelector(\"._lazy-settings-widget-wrapper button[lazy-settings-sidebar].is-active\")?.classList.remove(\"is-active\");\r\n    document.querySelector(`._lazy-settings-widget-wrapper button[lazy-settings-sidebar=\"${settings.get(\"themeSidebar\")}\"]`)?.classList.add(\"is-active\");\r\n\r\n    document.querySelector(\"._lazy-simplebar-content.layouts\")?.classList.remove(\"default\", \"v2\");\r\n    document.querySelector(\"._lazy-simplebar-content.layouts\")?.classList.add(settings.get(\"themeSidebar\"));\r\n}\r\n\r\ndocument.querySelectorAll(\"[lazy-settings-sidebar]\").forEach((element) => {\r\n    element.addEventListener(\"click\", () => {\r\n        toggleVersionSidebar(element.getAttribute(\"lazy-settings-sidebar\"));\r\n    })\r\n})\r\n// sidebar handler end\r\n\r\n\r\n// color preset start\r\n\r\n\r\n\r\nconst colorPreset = document.querySelector(\"[lazy-settins-colors]\")\r\nif(colorPreset) {\r\n    const preset = settings.validate.themeColor\r\n    const bg = [\"bg-success-300\", \"bg-indigo-300\", \"bg-info-300\", \"bg-warning-300\", \"bg-danger-300\"]\r\n\r\n    preset.forEach((element, index) => {\r\n        const div = document.createElement(\"button\");\r\n        div.classList.add(\"_lazy-settings-widget\");\r\n        div.type = \"button\";\r\n        div.attributes.setNamedItem(document.createAttribute(`lazy-settings-color`));\r\n        div.attributes.getNamedItem(`lazy-settings-color`).value = element;\r\n\r\n        const circle = document.createElement(\"div\");\r\n        circle.classList.add(\"color-preset\", `${bg[index]}`);\r\n        div.appendChild(circle);\r\n        \r\n        colorPreset.appendChild(div);\r\n    })\r\n\r\n    document.querySelectorAll(\"[lazy-settings-color]\").forEach((element) => {\r\n        element.addEventListener(\"click\", () => {\r\n            toggleColor(element.getAttribute(\"lazy-settings-color\"))\r\n        })\r\n    })\r\n\r\n    toggleColor(settings.get(\"themeColor\"));\r\n\r\n    function toggleColor(preset) {\r\n        document.querySelectorAll(\"[lazy-settings-color].is-active\").forEach((element) => {\r\n            element.classList.remove(\"is-active\")\r\n        })\r\n        document.querySelector(`[lazy-settings-color=\"${preset}\"]`).classList.add(\"is-active\");\r\n        settings.set(\"themeColor\", settings.validate.themeColor.includes(preset) ? preset : 'success')\r\n        document.querySelector(\"html\").setAttribute('theme-color', settings.get(\"themeColor\"));\r\n    }\r\n}\r\n// color preset end\r\n\r\n\r\n// restart start\r\ndocument.querySelector(\"[lazy-settings-restart]\")?.addEventListener(\"click\", () => {\r\n    toggleTheme(settings.default.themeMode);\r\n    toggleVersionSidebar(settings.default.themeSidebar);\r\n    toggleColor(settings.default.themeColor);\r\n})\r\n// restart end","const simplebar = document.querySelector(\"[lazy-simplebar-init]\");\r\n\r\nif(simplebar) {\r\n    let isOpen = false;\r\n    const simplebar_backdrop = simplebar.querySelector(\"[lazy-simplebar-backdrop]\");\r\n    const simplebar_body = simplebar.querySelector(\"[lazy-simplebar-content]\");\r\n\r\n    simplebar_backdrop.style.opacity = 0;\r\n    simplebar_backdrop.style.display = \"none\";\r\n    simplebar_backdrop.style.transition = \"opacity 300ms\"\r\n    \r\n    simplebar_body.style.transition = \"transform 300ms\"\r\n    \r\n    simplebar_backdrop.addEventListener(\"click\", toggleSidebar);\r\n    document.querySelectorAll(\"[lazy-simplebar-toggle]\").forEach((element) => {\r\n        element.addEventListener(\"click\", toggleSidebar)\r\n    })\r\n    \r\n    function toggleSidebar() {\r\n        if(isOpen) {\r\n            document.removeEventListener(\"keyup\", escapeKey);\r\n\r\n            simplebar_backdrop.style.opacity = 0;\r\n            setTimeout(() => {\r\n                simplebar_backdrop.style.display = \"none\";\r\n            }, 300)\r\n            simplebar_body.classList.remove(\"is-active\")\r\n\r\n            window.lazyDisableScrollbar(false)\r\n        } else {\r\n            document.addEventListener(\"keyup\", escapeKey);\r\n            \r\n            simplebar_backdrop.style.display = \"block\"\r\n            setTimeout(() => {\r\n                simplebar_backdrop.style.opacity = 1\r\n            }, 0)\r\n            simplebar_body.classList.add(\"is-active\")\r\n            window.lazyDisableScrollbar(true)\r\n        }\r\n        isOpen = !isOpen\r\n    }\r\n\r\n    function escapeKey(e) {\r\n        if(!isOpen) return\r\n        if(e.key != \"Escape\") return \r\n        e.preventDefault()\r\n        toggleSidebar()\r\n    }\r\n}\r\n\r\ndocument.querySelectorAll(\"._lazy-nav-subitem.is-active\").forEach((element) => {\r\n    element.closest(\"._lazy-navcollapse-content\").classList.add(\"is-active\")\r\n    element.closest(\"._lazy-navcollapse-content\").closest(\"[lazy-collapse-init]\").querySelector(\"._lazy-nav-item\").classList.add(\"is-active\")\r\n})\r\n\r\n// simplebar collapse header\r\ndocument.querySelectorAll('._lazy-navcollapse').forEach((element)=>{\r\n    const button = element.querySelector(\"._lazy-navcollapse-subheader\");\r\n    const content = element.querySelector(\"._lazy-navcollapse-content\");\r\n    let isOpen = content.classList.contains(\"is-active\");\r\n    content.classList.add(\"transition-all\", \"duration-300\", \"ease-in-out\");\r\n    button.addEventListener(\"click\", toggle);\r\n    function toggle(e) {\r\n        if (isOpen) {\r\n            isOpen = false;\r\n            content.style.height = content.scrollHeight + 'px';\r\n            setTimeout(() => {\r\n                content.style.height = '0px';\r\n            }, 0);\r\n        } else {\r\n            isOpen = true;\r\n            const finalHeight = content.scrollHeight + 'px';\r\n            content.style.height = finalHeight;\r\n        }\r\n    }\r\n\r\n    // if transition ends then set height to auto\r\n    content.addEventListener(\"transitionend\", () => {\r\n        (isOpen) ? content.classList.add(\"is-active\") : content.classList.remove(\"is-active\");\r\n        if(isOpen) content.style.height = 'auto';\r\n    })\r\n})\r\n","document.querySelectorAll(\"[lazy-collapse-target]\").forEach((element) => {\r\n    const target = element.getAttribute(\"lazy-collapse-target\");\r\n    const collapse = document.querySelector(`[lazy-collapse=\"${target}\"]`);\r\n\r\n    if (!collapse) return console.error(`LazyCollapse '${target}' Not Found.`);\r\n\r\n    let isOpen = collapse.classList.contains(\"is-active\");\r\n    collapse.classList.add(\"transition-all\");\r\n\r\n    target.addEventListener(\"click\", toggle);\r\n\r\n    function toggle() {\r\n        if (isOpen) {\r\n            isOpen = false;\r\n            collapse.style.height = collapse.scrollHeight + 'px';\r\n            setTimeout(() => {\r\n                collapse.style.height = '0px';\r\n            }, 0);\r\n        } else {\r\n            isOpen = true;\r\n            const finalHeight = collapse.scrollHeight + 'px';\r\n            collapse.style.height = finalHeight;\r\n        }\r\n    }\r\n\r\n    // if transition ends then set height to auto\r\n    collapse.addEventListener(\"transitionend\", () => {\r\n        (isOpen) ? collapse.classList.add(\"is-active\") : collapse.classList.remove(\"is-active\");\r\n        if(isOpen) collapse.style.height = 'auto';\r\n    })\r\n});\r\n\r\ndocument.querySelectorAll(\"[lazy-collapse-init]\").forEach((element) => {\r\n    // const identifer = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n    const buttons = element.querySelectorAll(\"[lazy-collapse-toggle]\");\r\n    const content = element.querySelector(\"[lazy-collapse-content]\");\r\n    if (!content) return console.error(`LazyCollapse Error.\\nCheck if the element has [lazy-collapse-toggle] and [lazy-collapse-content]`, element); \r\n    \r\n    let isOpen = content.classList.contains(\"is-active\");\r\n    content.classList.add(\"transition-all\", \"duration-300\", \"ease-in-out\");\r\n    buttons.forEach((button) => {\r\n        button.addEventListener(\"click\", toggle);\r\n    })\r\n\r\n    function toggle(e) {\r\n        if (isOpen) {\r\n            isOpen = false;\r\n            content.style.height = content.scrollHeight + 'px';\r\n            setTimeout(() => {\r\n                content.style.height = '0px';\r\n            }, 0);\r\n        } else {\r\n            isOpen = true;\r\n            const finalHeight = content.scrollHeight + 'px';\r\n            content.style.height = finalHeight;\r\n        }\r\n        arrowRotate()\r\n    }\r\n    function arrowRotate() {\r\n        if(!element.querySelector(\"[lazy-collapse-arrow]\")) return\r\n        if (isOpen) {\r\n            element.querySelector(\"[lazy-collapse-arrow]\").style.transform = \"rotate(90deg)\";\r\n        }else {\r\n            element.querySelector(\"[lazy-collapse-arrow]\").style.transform = \"rotate(0deg)\";\r\n        }\r\n    }\r\n\r\n    // if transition ends then set height to auto\r\n    content.addEventListener(\"transitionend\", () => {\r\n        (isOpen) ? content.classList.add(\"is-active\") : content.classList.remove(\"is-active\");\r\n        if(isOpen) content.style.height = 'auto';\r\n    })\r\n})","","const offcanvasMap = new Map()\r\n\r\ndocument.querySelectorAll(\"[lazy-offcanvas]\").forEach(offcanvas => {\r\n\r\n    const def = {\r\n        transitionDuration: 300,\r\n        transitionTimingFunction: \"ease\",\r\n        position_offcanvas: position_offcanvas(offcanvas)\r\n    }\r\n\r\n    const key = offcanvas.getAttribute(\"lazy-offcanvas\")\r\n    const buttons = document.querySelectorAll(`[lazy-offcanvas-toggle=${key}]`)\r\n    const backdrop = offcanvas.querySelector(\"._lazy-offcanvas-backdrop\") ?? offcanvas.querySelector(\"[x-backdrop]\");\r\n    const content = offcanvas.querySelector(\"._lazy-offcanvas-content\") || offcanvas.querySelector(\"[x-content]\");\r\n    const enableScroll = offcanvas.getAttribute(\"lazy-offcanvas-scroll\")\r\n    let isOpen = offcanvas.classList.contains(\"is-active\");\r\n\r\n    // setup default transition\r\n    backdrop.style.transition = \"opacity \" + def.transitionDuration + \"ms \" + def.transitionTimingFunction\r\n    backdrop.style.position = \"fixed\";\r\n    backdrop.style.visibility = \"hidden\";\r\n    backdrop.style.inset = \"0px\";\r\n    backdrop.style.opacity = 0;\r\n    content.style.transition = \"transform \" + def.transitionDuration + \"ms \" + def.transitionTimingFunction\r\n\r\n    // action handlers\r\n    backdrop.addEventListener(\"click\",() => { toggle(false) })\r\n    buttons.forEach(button => button.addEventListener(\"click\", toggle))\r\n\r\n    offcanvasMap.set(key, {\r\n        toggle\r\n    })\r\n\r\n    function toggle(show) {\r\n        if (!show || isOpen) {\r\n            document.removeEventListener(\"keyup\", escapeKey)\r\n            backdrop.style.opacity = 0\r\n            content.style.transform = def.position_offcanvas.transform_hide;\r\n            \r\n            setTimeout(() => {\r\n                offcanvas.style.visibility = \"hidden\"\r\n                backdrop.style.visibility = \"hidden\"\r\n                content.style.visibility = \"hidden\"\r\n                if(!enableScroll || enableScroll == \"false\") window.lazyDisableScrollbar(false)\r\n            }, def.transitionDuration)\r\n        } else {\r\n            document.addEventListener(\"keyup\", escapeKey)\r\n            if(!enableScroll || enableScroll == \"false\") window.lazyDisableScrollbar(true)\r\n\r\n            offcanvas.style.visibility = \"visible\"\r\n            backdrop.style.visibility = \"visible\"\r\n            content.style.visibility = \"visible\"\r\n\r\n            backdrop.style.opacity = 1\r\n            content.style.transform = def.position_offcanvas.transform_show;\r\n        }\r\n        isOpen = !isOpen\r\n    }\r\n\r\n    function escapeKey(e) {\r\n        if (!isOpen) return\r\n        if (e.key != \"Escape\") return\r\n        e.preventDefault()\r\n        toggle()\r\n    }\r\n})\r\n\r\nfunction position_offcanvas(offcanvas){\r\n    let position = {\r\n        transform_hide: \"translateX(100%)\",\r\n        transform_show: \"translateX(0%)\",\r\n    }\r\n    \r\n    if(offcanvas.querySelector(\"._lazy-offcanvas-content.offcanvas-left\")){\r\n        position.transform_hide = \"translateX(-100%)\"\r\n        position.transform_show = \"translateX(0%)\"\r\n    }\r\n\r\n    if(offcanvas.querySelector(\"._lazy-offcanvas-content.offcanvas-top\")){\r\n        position.transform_hide = \"translateY(-100%)\"\r\n        position.transform_show = \"translateY(0%)\"\r\n    }\r\n\r\n    if(offcanvas.querySelector(\"._lazy-offcanvas-content.offcanvas-bottom\")){\r\n        position.transform_hide = \"translateY(100%)\"\r\n        position.transform_show = \"translateY(0%)\"\r\n    }\r\n\r\n    return position\r\n}\r\n\r\nwindow.lazy_offcanvas = (key, show) => {\r\n    const offcanvas = offcanvasMap.get(key)\r\n    if(!offcanvas) return console.error(`LazyOffCanvas '${key}' Not Found.`);\r\n    offcanvas.toggle(show)\r\n}","document.querySelectorAll(\"[lazy-ripple]\").forEach(element => {\r\n    element.addEventListener(\"mousedown\", rippleEffect);\r\n});\r\n\r\nfunction rippleEffect(event) {\r\n    const btn = event.currentTarget;\r\n    let time;\r\n    if (time) clearTimeout(time);\r\n\r\n    const circle = document.createElement(\"span\");\r\n    const diameter = Math.max(btn.clientWidth, btn.clientHeight);\r\n    const radius = diameter / 2;\r\n\r\n    // Get the position of the button relative to the viewport\r\n    const btnRect = btn.getBoundingClientRect();\r\n\r\n    circle.style.width = circle.style.height = `${diameter}px`;\r\n    circle.style.left = `${event.clientX - (btnRect.left + radius)}px`;\r\n    circle.style.top = `${event.clientY - (btnRect.top + radius)}px`;\r\n    circle.classList.add(\"ripple\");\r\n    btn.appendChild(circle);\r\n\r\n    time = setTimeout(() => circle.remove(), 1000);\r\n}\r\n\r\n// ripple button circle\r\ndocument.querySelectorAll(\".btn-circle\").forEach((element)=>{\r\n    const ripple_wrapper = document.createElement(\"span\")\r\n    ripple_wrapper.classList.add(\"ripple-wrapper\")\r\n    const createspan = document.createElement(\"span\");\r\n    createspan.classList.add(\"ripple-circle\")\r\n    ripple_wrapper.appendChild(createspan)\r\n    element.appendChild(ripple_wrapper)\r\n})","document.querySelectorAll(\"[lazy-tooltip]\").forEach((element) => {\r\n    const tooltip = document.createElement(\"div\");\r\n    tooltip.className = \"_lazy-tooltip\";\r\n    tooltip.innerHTML = element.getAttribute(\"lazy-tooltip\");\r\n\r\n    element.addEventListener(\"mouseenter\", () => {\r\n        document.body.insertAdjacentElement(\"afterend\", tooltip);\r\n        positionTooltip(element, tooltip);\r\n        tooltip.classList.add(\"is-active\")\r\n    });\r\n\r\n    element.addEventListener(\"mouseleave\", () => {\r\n        tooltip.classList.remove(\"is-active\");\r\n        setTimeout(() => {\r\n            tooltip.remove();\r\n        },300)\r\n    });\r\n\r\n});\r\n\r\nfunction debounce(func, wait) {\r\n    let timeout;\r\n    return (...args) => {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => { func.apply(this, args); }, wait);\r\n    }\r\n}\r\n\r\nfunction positionTooltip(targetElement, tooltipElement) {\r\n    const targetRect = targetElement.getBoundingClientRect();\r\n    const tooltipRect = tooltipElement.getBoundingClientRect();\r\n    const viewportHeight = window.innerHeight;\r\n\r\n    const spaceAbove = targetRect.top;\r\n    const spaceBelow = viewportHeight - targetRect.bottom;\r\n    if (spaceAbove > spaceBelow || spaceBelow < tooltipRect.height) {\r\n        tooltipElement.style.top = targetRect.top - tooltipRect.height + \"px\";\r\n    } else {\r\n        tooltipElement.style.top = targetRect.bottom + \"px\";\r\n    }\r\n\r\n    tooltipElement.style.left = targetRect.left + \"px\";\r\n}\r\n"],"names":[],"sourceRoot":""}